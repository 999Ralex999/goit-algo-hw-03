import argparse
import shutil
from pathlib import Path


def get_unique_destination(file_path: Path) -> Path:

    counter = 1
    new_path = file_path
    while new_path.exists():
        new_path = file_path.with_name(f"{file_path.stem}_copy{counter}{file_path.suffix}")
        counter += 1
    return new_path


def create_extension_folder(base_folder: Path, extension: str) -> Path:

    folder = base_folder / extension
    folder.mkdir(parents=True, exist_ok=True)
    return folder


def copy_and_sort_files(source_folder: Path, destination_folder: Path):

    if not source_folder.exists() or not source_folder.is_dir():
        print(f"‚ùå –ü–∞–ø–∫–∞ {source_folder} –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ —î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é.")
        return

    files_processed = 0
    skipped_hidden = 0
    dirs_processed = 0

    for item in source_folder.rglob("*"):
        if item.is_dir():
            dirs_processed += 1
            continue
        if item.name.startswith('.'):
            skipped_hidden += 1
            continue
        if item.is_file():
            extension = item.suffix[1:].lower() if item.suffix else 'no_extension'
            target_dir = create_extension_folder(destination_folder, extension)
            destination_file = get_unique_destination(target_dir / item.name)
            try:
                shutil.copy2(item, destination_file)
                print(f"‚úÖ {item.name} ‚Üí {destination_file.relative_to(destination_folder)}")
                files_processed += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ {item}: {e}")

    print("\nüìä –ó–≤—ñ—Ç:")
    print(f"üìÅ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π: {dirs_processed}")
    print(f"üìÑ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —Ñ–∞–π–ª—ñ–≤: {files_processed}")
    print(f"üôà –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {skipped_hidden}")


def main():
    parser = argparse.ArgumentParser(description="–†–µ–∫—É—Ä—Å–∏–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º")
    parser.add_argument("source", help="–®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    parser.add_argument("destination", nargs="?", default="dist", help="–®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (default: dist)")
    args = parser.parse_args()

    source_path = Path(args.source)
    destination_path = Path(args.destination)

    destination_path.mkdir(parents=True, exist_ok=True)
    print(f"üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ {source_path} –¥–æ {destination_path}...\n")
    copy_and_sort_files(source_path, destination_path)
    print("\n‚úÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    main()
